# Archivo compose para produccion (no montamos volÃºmenes)
services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - 8432:5432

  web:
    build: ./app
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             uv run gunicorn --chdir /app global_exchange_django.wsgi:application -w 4 -b 0.0.0.0:8000 --log-level=info"
    working_dir: /app
    environment:
      - DJANGO_SETTINGS_MODULE=global_exchange_django.settings
      - RUN_MIGRATIONS=1
    env_file:
      - ./.env.prod
    volumes:
      - static_volume:/app/staticfiles
    expose:
      - 8000
    depends_on:
      - db

  nginx:
    image: nginx:1.25-alpine
    ports:
      - 8080:80
      - 4443:443
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/static:ro
    depends_on:
      - web

      
  # --- SERVICIO DE CELERY WORKER (Procesa las tareas) ---
  celery_worker:
    build: ./app
    # El comando para correr el worker
    command: uv run celery -A global_exchange_django worker -l info
    working_dir: /app
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=global_exchange_django.settings
    depends_on:
      - redis
      - db
    restart: always

  # --- SERVICIO DE CELERY BEAT (El programador de tareas recurrentes) ---
  celery_beat:
    build: ./app
    # Usamos DatabaseScheduler para que las frecuencias sean configurables desde el admin de Django y persistan
    command: uv run celery -A global_exchange_django beat -l info --scheduler django_celery_beat.schedulers.DatabaseScheduler
    working_dir: /app
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=global_exchange_django.settings
    depends_on:
      - redis
      - db
    restart: always

volumes:
  postgres_data_prod:
  static_volume:
