services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 7432:5432

  web:
    build:
      context: ./app
      cache_from:
        - ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    command: uv run manage.py runserver 0.0.0.0:8000
    working_dir: /app
    volumes:
      # Montar codigo fuente pero excluir .venv
      - ./app:/app:cached
      # Volumen anonimo (no montado desde host) para .venv
      - /app/.venv
      # Montar CSS generado por Tailwind (no en modo cached)
      - ./app/static/css/output.css:/app/static/css/output.css:ro
    ports:
      - 8000:8000
    env_file:
      - ./.env
    environment:
      - RUN_MIGRATIONS=1
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        # Sincronizar cambios en codigo fuente
        - action: sync
          path: ./app
          target: /app
          ignore:
            - .venv/
            - __pycache__/
            - "*.pyc"
            - "*.pyo"
            - "*.pyd"
            - static/css/output.css
            - static/css/tailwindcss*
        # Rebuild cuando cambian dependencias
        - action: rebuild
          path: ./app/uv.lock
        - action: rebuild
          path: ./app/pyproject.toml

  test:
    build:
      context: ./app
      cache_from:
        - ghcr.io/astral-sh/uv:python3.13-bookworm-slim
      args:
        - INSTALL_DEV_DEPS=true
    command: pytest -v
    working_dir: /app
    volumes:
      - ./app:/app:cached
      - /app/.venv
    env_file:
      - ./.env
    environment:
      - RUN_MIGRATIONS=0
    depends_on:
      db:
        condition: service_healthy

  # Servicio Redis para desarrollo local
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  # celery worker y beat
  celery_worker:
    build:
      context: ./app
      cache_from:
        - ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    command: uv run celery -A global_exchange_django worker --loglevel=info
    working_dir: /app
    volumes:
      - ./app:/app:cached
      - /app/.venv
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  celery_beat:
    build:
      context: ./app
      cache_from:
        - ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    command: uv run celery -A global_exchange_django beat --loglevel=info
    working_dir: /app
    volumes:
      - ./app:/app:cached
      - /app/.venv
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

volumes:
  postgres_data_dev:
